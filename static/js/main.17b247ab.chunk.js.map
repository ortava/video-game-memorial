{"version":3,"sources":["nameplates.js","App.js","index.js"],"names":["dataLength","index","currentPlatform","newPlatform","loadData","platform","indexRangeBottom","indexRangeTop","xhr","XMLHttpRequest","open","onload","this","status","data","JSON","parse","responseText","currentLength","length","i","splice","sortData","output","document","getElementById","innerHTML","image","title","description","icon","generateNameplates","send","setPlatform","window","scrollTo","App","_useOnScreen","root","rootMargin","threshold","_useState","useState","_useState2","Object","slicedToArray","ref","setRef","_useState3","_useState4","isIntersecting","setIntersecting","useEffect","observer","IntersectionObserver","_ref","entry","observe","unobserve","useOnScreen","_useOnScreen2","react_default","a","createElement","style","height","btns","getElementsByClassName","addEventListener","bind","id","setButtons","ReactDOM","render"],"mappings":"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","file":"static/js/main.17b247ab.chunk.js","sourcesContent":["// Purpose: Handles the retrieval and handling of data from a given JSON file using AJAX requests.\r\n//          Uses data to generate HTML for nameplates and sends it to the webpage.\r\n//          Keeps track of which console's data to use and how much of the data has been sent to the webpage using index.\r\n//          Sets button functionality to sort for the console specified by the user.\r\n\r\n// global variables \r\nexport var index = 0;                                 // keeps track of how much data has been sent to the webpage\r\nexport var dataLength;                                // length of the data in use\r\nexport var currentPlatform = 'Default';               // the platform to get data for\r\nvar newPlatform = false;                              // keeps track of when a new platform has been selected\r\n\r\n// sets functionality for buttons in toolbar\r\nexport default function setButtons(){\r\n  const btns = document.getElementById('toolbar').getElementsByClassName('btn');   // get buttons in toolbar\r\n\r\n  for (var i = 0; i < btns.length; i++){                                           // when each button is clicked\r\n    btns[i].addEventListener(\"click\", setPlatform.bind(null, btns[i].id), false);  // set the platform\r\n    btns[i].addEventListener(\"click\", loadData.bind(null, btns[i].id), false);     // load data for the given platform (defined by its id)\r\n  }\r\n}\r\n\r\nexport function loadData(platform) {\r\n  var xhr = new XMLHttpRequest();                     // create new HTTP request\r\n  var indexRangeBottom;                               // the bottom of the range of elements to be generated from the json file.\r\n  var indexRangeTop;                                  // the top of the range of elements to be generated from the json file.\r\n\r\n  // note that one could host this file a number of different ways.\r\n  xhr.open('GET',                                                                                        // retrieve data from json file.\r\n          'nameplates.json',\r\n          true);                                                                                         // this is an asynchronous request\r\n  \r\n  xhr.onload = function(){                            // this function runs after loadData() and App() are done because this is an async request\r\n    if(this.status === 200){\r\n        var data = JSON.parse(xhr.responseText);      // store the data from the json file\r\n\r\n        if (platform !== 'Default'){                  // if a button has been clicked\r\n          if (newPlatform){\r\n            index = 0;                                // reset index\r\n          }\r\n            if (platform !== 'All'){                  // if the button indicates a specific platform\r\n              data = sortData(data, platform);        // keep only the data with the specified platform\r\n            }\r\n        }\r\n\r\n        indexRangeBottom = index;                     // the bottom of the range of elements to be generated from the json file.\r\n        \r\n        if (index + 12 >= data.length){               // if printing another 12 nameplates causes the index to surpass the number of total elements in the file\r\n          indexRangeTop = data.length                 // print until the end of the file instead\r\n        }\r\n        else indexRangeTop = index + 12;              // otherwise, print the next 12 nameplates (this happens everytime we request the file)\r\n\r\n        index = indexRangeTop;                        // update index to represent the highest numbered element generated from the file so far\r\n        dataLength = data.length;                     // set global variable so we know when to stop loading\r\n\r\n        if (indexRangeTop <= data.length){\r\n          generateNameplates(data, indexRangeBottom, indexRangeTop)       // append new batch of nameplate html to output\r\n        }\r\n\r\n        newPlatform = false;                          // data has already been loaded, so this is no longer a new platform         \r\n    }\r\n  }\r\n  xhr.send();                                         // send HTTP request\r\n}\r\n\r\n// generates the html for a batch of nameplates, one for each element within the range passed to the function\r\nexport function generateNameplates(data, indexRangeBottom, indexRangeTop){\r\n    var output = '';    // initialize html output string\r\n\r\n    if (indexRangeBottom === 0){                                        // if this is a new set of data\r\n      document.getElementById(\"graveyard\").innerHTML = '';              // reset html in graveyard\r\n    }\r\n    \r\n  \r\n    for(var i = indexRangeBottom; i < indexRangeTop; i++){\r\n        output += \"<div class='nameplate'>\"+\r\n        \"<img src='\"+data[i].image+\"' alt='Video Game' \";\r\n  \r\n        output += \"width='180px' height='225px'}/><br>\"; \r\n  \r\n        output += \"<div class='title'>\"+data[i].title+\"</div><hr>\" +     \r\n        \"<div class='description'>\"+data[i].description+\"</div>\" +\r\n\r\n        \"<span class='iconify' data-icon='\"+data[i].icon +\"'\" +\r\n        \"data-inline='false' data-width='50px' data-height='50px'></span>\" +\r\n\r\n        \"</div>\";         \r\n    }      \r\n\r\n    document.getElementById(\"graveyard\").innerHTML += output;          // send html to the div with id=\"graveyard\"\r\n  }\r\n\r\n// set the current platform based on the button pressed\r\n  function setPlatform(platform){\r\n    if (currentPlatform !== platform){ // if the user hasn't pressed the same button\r\n      newPlatform = true;              // a new button has been pressed\r\n    }\r\n    \r\n    currentPlatform = platform;        // this is the new current platform\r\n    window.scrollTo(0, 0);             // scroll back to the top of the page\r\n  }\r\n\r\n// returns data with only the specified platform\r\nfunction sortData(data, platform){\r\n  var currentLength = data.length;\r\n\r\n  for (var i = 0; i < currentLength; i++){\r\n    if (data[i].platform !== platform){             // if this entry is not from the specified platform\r\n      data.splice(i,1);                             // delete this entry in the data\r\n      currentLength = data.length;                  // update the current length of the data\r\n      i = i - 1;                                    // adjust the element index according to new data length\r\n    }\r\n  }\r\n\r\n  return data;                                      // return the sorted data\r\n}\r\n","// Purpose: The main functionality of the website happens here. Infinite Scrolling.\r\n//          Intersection Observer functionality is implemented to detect when the user has reached near the bottom of the webpage.\r\n//          When near the bottom of the page, an AJAX call is made by calling loadData from nameplate.js in order to retrieve data and use data from a JSON file.\r\n\r\nimport React, { useEffect, useState } from 'react'\r\nimport { index, dataLength, currentPlatform, loadData } from './nameplates.js'\r\n\r\nexport default function App() {\r\n  const [setRef, isIntersecting] = useOnScreen(document.getElementById('body'), '250px', 0);\r\n\r\n  if ((index !== dataLength) && isIntersecting) {        // if there is more data to be loaded and the target is being intersected\r\n    loadData(currentPlatform);                           // load more data for the selected platform\r\n  }  \r\n\r\n  return (                                               // return HTML indicating that we've reached the bottom of the page (this is rendered at the bottom of the page)\r\n    <div>\r\n      <div style={{ height: '5vh'}}></div>\r\n      <div\r\n        ref={setRef}                                     // this div is our Intersection Observer's target\r\n        style={{height: '10vh'}}\r\n      >\r\n        <h1>You've reached the end.</h1>\r\n        <br></br>\r\n        <h1>Congratulations!</h1>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\n// React Hook\r\nfunction useOnScreen(root, rootMargin, threshold) {\r\n  \r\n  const [ref, setRef] = useState(null);                       // state and setter for storing current ref\r\n  const [isIntersecting, setIntersecting] = useState(false);  // state and setter for storing whether element is visible\r\n\r\n  useEffect(() => {\r\n    const observer = new IntersectionObserver(([entry]) => {  // create an IntersectionObserver\r\n        // Update our state when observer callback fires\r\n        setIntersecting(entry.isIntersecting);\r\n      }, {root, rootMargin, threshold});\r\n    \r\n    if (ref) {\r\n      observer.observe(ref);\r\n    }\r\n\r\n    return () => {\r\n      if (ref) {\r\n      observer.unobserve(ref);\r\n      }\r\n    };\r\n  }, [ref, root, rootMargin, threshold]);   \r\n\r\n  return [setRef, isIntersecting];                            // return ref and whether we are intersecting\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport setButtons from './nameplates';\r\nimport './main.css';    // ensure that our css file is included by webpack\r\n\r\nsetButtons();           // assign functions to our button elements\r\n\r\nReactDOM.render(<App />, document.getElementById('loading'));   // renders the target div for IntersectionObserver in the #loading div at the bottom of the webpage"],"sourceRoot":""}